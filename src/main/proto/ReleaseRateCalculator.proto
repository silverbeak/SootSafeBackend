syntax = "proto3";

import "SootSafeCommon.proto";

option java_package = "com.sootsafe.server.calculator";

package com.sootsafe.server.calculator;

message ReleaseRateResultEntry {
    int32 key = 1;
    double releaseCharacter = 2;
}

message ReleaseRateCalculationResult {
    ErrorMessage errorMessage = 1;
    ReleaseRateResultEntry releaseRateResult = 2;
    double zoneExtent = 3;
    string zoneLabel = 4;
}

message ReleaseRateValues {
    double volumetricGasFlowRate = 1;    // Q_g
    double safetyFactor = 2;             // k
    double lowerFlammableLimit = 3;      // LFL
    double massReleaseRate = 4;          // W_g
    double molarMass = 5;                // M
    double gasDensity = 6;               // rho_g
    double dischargeCoefficient = 7;     // C_d
    double crossSectionArea = 8;         // S
    double pressureDifference = 9;       // p
    double poolSurfaceArea = 10;         // A_p
    double windSpeed = 11;               // u_w
    double absoluteTemperature = 12;     // T
    double adiabaticExpansion = 13;      // \\gamma
    double atmosphericPressure = 14;     // p_a
    double containerPressure = 15;       // p
    double criticalGasPressure = 16;     // p_c
    double compressibilityFactor = 17;   // Z
}

message BackgroundConcentrationValues {
    double safetyFactor = 1;            // f
    double volumetricFlowAir = 2;       // Q1
    double volumetricFlowAirGas = 3;    // Q2
    double airChangeFrequency = 4;      // C
    double roomVolume = 5;              // V0
    double crossSectionArea = 6;        // S
}

message VentilationVelocityValues {
    double elevation = 1;
    Obstruction obstructed = 2;
}

message ReleaseRateRequest {
    int32 key = 1;
    bool isGasCalculation = 2;
    bool performReleaseCalculation = 3;
    bool hasReleaseRateInKgPerSecond = 4;
    bool isEvaporationFromPool = 5;

    ReleaseRateValues releaseRateValues = 6;

    bool isIndoors = 7;

    BackgroundConcentrationValues bgConcentrationValues = 8;

    GradeOfRelease gradeOfRelease = 9;
    ReleaseType releaseType = 10;

    VentilationVelocityValues ventilationVelocityValues = 11;
    VentilationAvailability ventilationAvailability = 12;

    string casNumber = 13;
}

service ReleaseRateCalculator {
    rpc GetReleaseRate (ReleaseRateRequest) returns (ReleaseRateCalculationResult) {
    }
}

enum VentilationAvailability {
    Good = 0;
    Fair = 1;
    Poor = 2;
}

enum GradeOfRelease {
    Continuous = 0;
    Primary = 1;
    Secondary = 2;
}

enum ReleaseType {
    Jet = 0;
    DiffusiveJet = 1;
    HeavyGas = 2;
}

enum Obstruction {
    Obstructed = 0;
    Unobstructed = 1;
}
